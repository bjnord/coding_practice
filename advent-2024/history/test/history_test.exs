defmodule HistoryTest do
  use ExUnit.Case
  doctest History, import: true

  describe "examples" do
    setup do
      [
        twos: [
          [
            [[:a, :b], [:c, :d]],
            [[:e, :f], [:g, :h]],
          ],
          [
            [[:i, :j], [:k, :l]],
            [[:m, :n], [:o, :p]],
          ],
        ],
        exp_flat_twos: [
          [:a, :b], [:c, :d],
          [:e, :f], [:g, :h],
          [:i, :j], [:k, :l],
          [:m, :n], [:o, :p],
        ],
        threes: [
          [
            [
              [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
              [[2, 3, 4], [5, 6, 7], [8, 9, 0]],
              [[3, 4, 5], [6, 7, 8], [9, 0, 1]],
            ],
            [
              [[4, 5, 6], [7, 8, 9], [0, 1, 2]],
              [[5, 6, 7], [8, 9, 0], [1, 2, 3]],
              [[6, 7, 8], [9, 0, 1], [2, 3, 4]],
            ],
            [
              [[7, 8, 9], [0, 1, 2], [3, 4, 5]],
              [[8, 9, 0], [1, 2, 3], [4, 5, 6]],
              [[9, 0, 1], [2, 3, 4], [5, 6, 7]],
            ],
          ],
          [
            [
              [[0, 1, 2], [3, 4, 5], [6, 7, 8]],
              [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
              [[2, 3, 4], [5, 6, 7], [8, 9, 0]],
            ],
            [
              [[3, 4, 5], [6, 7, 8], [9, 0, 1]],
              [[4, 5, 6], [7, 8, 9], [0, 1, 2]],
              [[5, 6, 7], [8, 9, 0], [1, 2, 3]],
            ],
            [
              [[6, 7, 8], [9, 0, 1], [2, 3, 4]],
              [[7, 8, 9], [0, 1, 2], [3, 4, 5]],
              [[8, 9, 0], [1, 2, 3], [4, 5, 6]],
            ],
          ],
          [
            [
              [[9, 0, 1], [2, 3, 4], [5, 6, 7]],
              [[0, 1, 2], [3, 4, 5], [6, 7, 8]],
              [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
            ],
            [
              [[2, 3, 4], [5, 6, 7], [8, 9, 0]],
              [[3, 4, 5], [6, 7, 8], [9, 0, 1]],
              [[4, 5, 6], [7, 8, 9], [0, 1, 2]],
            ],
            [
              [[5, 6, 7], [8, 9, 0], [1, 2, 3]],
              [[6, 7, 8], [9, 0, 1], [2, 3, 4]],
              [[7, 8, 9], [0, 1, 2], [3, 4, 5]],
            ],
          ],
        ],
        exp_flat_threes: [
          [1, 2, 3], [4, 5, 6], [7, 8, 9],
          [2, 3, 4], [5, 6, 7], [8, 9, 0],
          [3, 4, 5], [6, 7, 8], [9, 0, 1],
          [4, 5, 6], [7, 8, 9], [0, 1, 2],
          [5, 6, 7], [8, 9, 0], [1, 2, 3],
          [6, 7, 8], [9, 0, 1], [2, 3, 4],
          [7, 8, 9], [0, 1, 2], [3, 4, 5],
          [8, 9, 0], [1, 2, 3], [4, 5, 6],
          [9, 0, 1], [2, 3, 4], [5, 6, 7],
          [0, 1, 2], [3, 4, 5], [6, 7, 8],
          [1, 2, 3], [4, 5, 6], [7, 8, 9],
          [2, 3, 4], [5, 6, 7], [8, 9, 0],
          [3, 4, 5], [6, 7, 8], [9, 0, 1],
          [4, 5, 6], [7, 8, 9], [0, 1, 2],
          [5, 6, 7], [8, 9, 0], [1, 2, 3],
          [6, 7, 8], [9, 0, 1], [2, 3, 4],
          [7, 8, 9], [0, 1, 2], [3, 4, 5],
          [8, 9, 0], [1, 2, 3], [4, 5, 6],
          [9, 0, 1], [2, 3, 4], [5, 6, 7],
          [0, 1, 2], [3, 4, 5], [6, 7, 8],
          [1, 2, 3], [4, 5, 6], [7, 8, 9],
          [2, 3, 4], [5, 6, 7], [8, 9, 0],
          [3, 4, 5], [6, 7, 8], [9, 0, 1],
          [4, 5, 6], [7, 8, 9], [0, 1, 2],
          [5, 6, 7], [8, 9, 0], [1, 2, 3],
          [6, 7, 8], [9, 0, 1], [2, 3, 4],
          [7, 8, 9], [0, 1, 2], [3, 4, 5],
        ],
      ]
    end

    test "flattens multi-dimensional list (twos)", fixture do
      act_flat_twos = History.flatten_2d(fixture.twos)
      assert act_flat_twos == fixture.exp_flat_twos
    end

    test "flattens multi-dimensional list (threes)", fixture do
      act_flat_threes = History.flatten_2d(fixture.threes)
      assert act_flat_threes == fixture.exp_flat_threes
    end
  end
end
