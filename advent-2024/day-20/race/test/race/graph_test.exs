defmodule Race.GraphTest do
  use ExUnit.Case
  doctest Race.Graph, import: true

  alias Race.Graph
  alias History.Grid

  describe "puzzle example" do
    setup do
      [
        grid: %Grid{
          size: %{y: 15, x: 15},
          squares: %{
            {0, 0} => ?#, {0, 1} => ?#, {0, 2} => ?#, {0, 3} => ?#, {0, 4} => ?#,
            {0, 5} => ?#, {0, 6} => ?#, {0, 7} => ?#, {0, 8} => ?#, {0, 9} => ?#,
            {0, 10} => ?#, {0, 11} => ?#, {0, 12} => ?#, {0, 13} => ?#, {0, 14} => ?#,
            {1, 0} => ?#, {1, 4} => ?#, {1, 8} => ?#, {1, 14} => ?#,
            {2, 0} => ?#, {2, 2} => ?#, {2, 4} => ?#, {2, 6} => ?#, {2, 8} => ?#,
            {2, 10} => ?#, {2, 11} => ?#, {2, 12} => ?#, {2, 14} => ?#,
            {3, 0} => ?#, {3, 2} => ?#, {3, 6} => ?#, {3, 8} => ?#, {3, 10} => ?#,
            {3, 14} => ?#,
            {4, 0} => ?#, {4, 1} => ?#, {4, 2} => ?#, {4, 3} => ?#, {4, 4} => ?#,
            {4, 5} => ?#, {4, 6} => ?#, {4, 8} => ?#, {4, 10} => ?#, {4, 12} => ?#,
            {4, 13} => ?#, {4, 14} => ?#,
            {5, 0} => ?#, {5, 1} => ?#, {5, 2} => ?#, {5, 3} => ?#, {5, 4} => ?#,
            {5, 5} => ?#, {5, 6} => ?#, {5, 8} => ?#, {5, 10} => ?#, {5, 14} => ?#,
            {6, 0} => ?#, {6, 1} => ?#, {6, 2} => ?#, {6, 3} => ?#, {6, 4} => ?#,
            {6, 5} => ?#, {6, 6} => ?#, {6, 8} => ?#, {6, 10} => ?#, {6, 11} => ?#,
            {6, 12} => ?#, {6, 14} => ?#,
            {7, 0} => ?#, {7, 1} => ?#, {7, 2} => ?#, {7, 6} => ?#, {7, 10} => ?#,
            {7, 14} => ?#,
            {8, 0} => ?#, {8, 1} => ?#, {8, 2} => ?#, {8, 4} => ?#, {8, 5} => ?#,
            {8, 6} => ?#, {8, 7} => ?#, {8, 8} => ?#, {8, 9} => ?#, {8, 10} => ?#,
            {8, 12} => ?#, {8, 13} => ?#, {8, 14} => ?#,
            {9, 0} => ?#, {9, 4} => ?#, {9, 5} => ?#, {9, 6} => ?#, {9, 10} => ?#,
            {9, 14} => ?#,
            {10, 0} => ?#, {10, 2} => ?#, {10, 3} => ?#, {10, 4} => ?#, {10, 5} => ?#,
            {10, 6} => ?#, {10, 8} => ?#, {10, 10} => ?#, {10, 11} => ?#, {10, 12} => ?#,
            {10, 14} => ?#,
            {11, 0} => ?#, {11, 2} => ?#, {11, 6} => ?#, {11, 8} => ?#, {11, 10} => ?#,
            {11, 14} => ?#,
            {12, 0} => ?#, {12, 2} => ?#, {12, 4} => ?#, {12, 6} => ?#, {12, 8} => ?#,
            {12, 10} => ?#, {12, 12} => ?#, {12, 13} => ?#, {12, 14} => ?#,
            {13, 0} => ?#, {13, 4} => ?#, {13, 8} => ?#, {13, 12} => ?#, {13, 13} => ?#,
            {13, 14} => ?#,
            {14, 0} => ?#, {14, 1} => ?#, {14, 2} => ?#, {14, 3} => ?#, {14, 4} => ?#,
            {14, 5} => ?#, {14, 6} => ?#, {14, 7} => ?#, {14, 8} => ?#, {14, 9} => ?#,
            {14, 10} => ?#, {14, 11} => ?#, {14, 12} => ?#, {14, 13} => ?#, {14, 14} => ?#,
          },
          meta: %{
            start: {3, 1},
            end: {7, 5},
          },
        },
        exp_min_steps: 84,
      ]
    end

    test "calculates lowest-cost path", fixture do
      act_min_steps = fixture.grid
                      |> Graph.new()
                      |> Graph.lowest_cost()
      assert act_min_steps == fixture.exp_min_steps
    end
  end
end
