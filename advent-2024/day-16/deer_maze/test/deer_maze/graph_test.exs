defmodule DeerMaze.GraphTest do
  use ExUnit.Case
  doctest DeerMaze.Graph, import: true

  alias DeerMaze.Graph
  import DeerMaze.Parser

  describe "puzzle examples" do
    setup do
      [
        inputs: [
          """
          ###############
          #.......#....E#
          #.#.###.#.###.#
          #.....#.#...#.#
          #.###.#####.#.#
          #.#.#.......#.#
          #.#.#####.###.#
          #...........#.#
          ###.#.#####.#.#
          #...#.....#.#.#
          #.#.#.###.#.#.#
          #.....#...#.#.#
          #.###.#.#.#.#.#
          #S..#.....#...#
          ###############
          """,
          """
          #################
          #...#...#...#..E#
          #.#.#.#.#.#.#.#.#
          #.#.#.#...#...#.#
          #.#.#.#.###.#.#.#
          #...#.#.#.....#.#
          #.#.#.#.#.#####.#
          #.#...#.#.#.....#
          #.#.#####.#.###.#
          #.#.#.......#...#
          #.#.###.#####.###
          #.#.#...#.....#.#
          #.#.#.#####.###.#
          #.#.#.........#.#
          #.#.#.#########.#
          #S#.............#
          #################
          """,
          """
          #######
          #....E#
          ###.#.#
          #.....#
          #.#.#.#
          #S..#.#
          #######
          """,
        ],
        exp_graphs: [
          %Graph{
            nodes: %{
            },
            meta: %{
              start: {{13, 1}, :east},
              end: {1, 13},
            },
          },
          %Graph{
            nodes: %{
            },
            meta: %{
              start: {{15, 1}, :east},
              end: {1, 15},
            },
          },
          %Graph{
            nodes: %{
              {{5, 1}, :north} => [
                {{{3, 1}, :north}, 2},
                {{{5, 1}, :east}, 1000},
                {{{5, 1}, :west}, 1000},
              ],
              {{5, 1}, :east} => [
                {{{5, 1}, :north}, 1000},
                {{{5, 3}, :east}, 2},
                {{{5, 1}, :south}, 1000},
              ],
              {{5, 1}, :south} => [
                {{{5, 1}, :east}, 1000},
                {{{5, 1}, :west}, 1000},
              ],
              {{5, 1}, :west} => [
                {{{5, 1}, :north}, 1000},
                {{{5, 1}, :south}, 1000},
              ],
              # ----
              {{5, 3}, :north} => [
                {{{3, 3}, :north}, 2},
                {{{5, 3}, :east}, 1000},
                {{{5, 3}, :west}, 1000},
              ],
              {{5, 3}, :east} => [
                {{{5, 3}, :north}, 1000},
                {{{5, 3}, :south}, 1000},
              ],
              {{5, 3}, :south} => [
                {{{5, 3}, :east}, 1000},
                {{{5, 3}, :west}, 1000},
              ],
              {{5, 3}, :west} => [
                {{{5, 3}, :north}, 1000},
                {{{5, 3}, :south}, 1000},
                {{{5, 1}, :west}, 2},
              ],
              # ----
              {{3, 1}, :north} => [
                {{{3, 1}, :east}, 1000},
                {{{3, 1}, :west}, 1000},
              ],
              {{3, 1}, :east} => [
                {{{3, 1}, :north}, 1000},
                {{{3, 3}, :east}, 2},
                {{{3, 1}, :south}, 1000},
              ],
              {{3, 1}, :south} => [
                {{{3, 1}, :east}, 1000},
                {{{5, 1}, :south}, 2},
                {{{3, 1}, :west}, 1000},
              ],
              {{3, 1}, :west} => [
                {{{3, 1}, :north}, 1000},
                {{{3, 1}, :south}, 1000},
              ],
              # ----
              {{3, 3}, :north} => [
                {{{1, 3}, :north}, 2},
                {{{3, 3}, :east}, 1000},
                {{{3, 3}, :west}, 1000},
              ],
              {{3, 3}, :east} => [
                {{{3, 3}, :north}, 1000},
                {{{3, 5}, :east}, 2},
                {{{3, 3}, :south}, 1000},
              ],
              {{3, 3}, :south} => [
                {{{3, 3}, :east}, 1000},
                {{{5, 3}, :south}, 2},
                {{{3, 3}, :west}, 1000},
              ],
              {{3, 3}, :west} => [
                {{{3, 3}, :north}, 1000},
                {{{3, 3}, :south}, 1000},
                {{{3, 1}, :west}, 2},
              ],
              # ----
              {{1, 3}, :north} => [
                {{{1, 3}, :east}, 1000},
                {{{1, 3}, :west}, 1000},
              ],
              {{1, 3}, :east} => [
                {{{1, 3}, :north}, 1000},
                {{{1, 5}, :end}, 2},
                {{{1, 3}, :south}, 1000},
              ],
              {{1, 3}, :south} => [
                {{{1, 3}, :east}, 1000},
                {{{3, 3}, :south}, 2},
                {{{1, 3}, :west}, 1000},
              ],
              {{1, 3}, :west} => [
                {{{1, 3}, :north}, 1000},
                {{{1, 3}, :south}, 1000},
              ],
              # ----
              {{3, 5}, :north} => [
                {{{3, 5}, :east}, 1000},
                {{{1, 5}, :end}, 2},
                {{{3, 5}, :west}, 1000},
              ],
              {{3, 5}, :east} => [
                {{{3, 5}, :nouth}, 1000},
                {{{3, 5}, :south}, 1000},
              ],
              {{3, 5}, :south} => [
                {{{3, 5}, :east}, 1000},
                {{{3, 5}, :west}, 1000},
              ],
              {{3, 5}, :west} => [
                {{{3, 5}, :nouth}, 1000},
                {{{3, 3}, :west}, 2},
                {{{3, 5}, :south}, 1000},
              ],
            },
            meta: %{
              start: {{5, 1}, :east},
              end: {1, 5},
            },
          },
        ],
      ]
    end

    test "produces correct graphs", fixture do
      act_graphs = fixture.inputs
                   |> Enum.slice(2..2)  # FIXME DEBUG TEMP
                   |> Enum.map(&parse_input_string/1)
                   |> Enum.map(&Graph.from_grid/1)
      assert act_graphs == fixture.exp_graphs
                           |> Enum.slice(2..2)  # FIXME DEBUG TEMP
    end
  end
end
