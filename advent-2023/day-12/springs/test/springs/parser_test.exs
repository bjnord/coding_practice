defmodule Springs.ParserTest do
  use ExUnit.Case
  doctest Springs.Parser, import: true

  import Springs.Parser
  alias Springs.Row

  describe "puzzle example" do
    setup do
      [
        input: """
        ???.### 1,1,3
        .??..??...?##. 1,1,3
        ?#?#?#?#?#?#?#? 1,3,1,6
        ????.#...#... 4,1,1
        ????.######..#####. 1,6,5
        ?###???????? 3,2,1
        ?#.?..?.##.###? 2,1,2,3
        #???????.??.?.??.? 8,2,1,1
        ?.?#?.?????.?.?.. 1,2,5,1
        ??.?????.?.##.? 1,1,3,2
        .?.?.??#?.#.?.???? 1,4,1,1,2
        ?.#.???.??.??? 1,3,1,2
        ?.##?.???.??.? 1,3,2,2
        """,
        exp_rows: [
          %Row{
            clusters: [
              {'???', 3, 0},
              {'###', 0, 3},
            ],
            counts: [1, 1, 3],
          },
          %Row{
            clusters: [
              {'??', 2, 0},
              {'??', 2, 0},
              {'?##', 1, 2},
            ],
            counts: [1, 1, 3],
          },
          %Row{
            clusters: [
              {'?#?#?#?#?#?#?#?', 8, 7},
            ],
            counts: [1, 3, 1, 6],
          },
          %Row{
            clusters: [
              {'????', 4, 0},
              {'#', 0, 1},
              {'#', 0, 1},
            ],
            counts: [4, 1, 1],
          },
          %Row{
            clusters: [
              {'????', 4, 0},
              {'######', 0, 6},
              {'#####', 0, 5},
            ],
            counts: [1, 6, 5],
          },
          %Row{
            clusters: [
              {'?###????????', 9, 3},
            ],
            counts: [3, 2, 1],
          },
          %Row{
            clusters: [
              {'?#', 1, 1},
              {'?', 1, 0},
              {'?', 1, 0},
              {'##', 0, 2},
              {'###?', 1, 3},
            ],
            counts: [2, 1, 2, 3],
          },
          %Row{
            clusters: [
              {'#???????', 7, 1},
              {'??', 2, 0},
              {'?', 1, 0},
              {'??', 2, 0},
              {'?', 1, 0},
            ],
            counts: [8, 2, 1, 1],
          },
          %Row{
            clusters: [
              {'?', 1, 0},
              {'?#?', 2, 1},
              {'?????', 5, 0},
              {'?', 1, 0},
              {'?', 1, 0},
            ],
            counts: [1, 2, 5, 1],
          },
          %Row{
            clusters: [
              {'??', 2, 0},
              {'?????', 5, 0},
              {'?', 1, 0},
              {'##', 0, 2},
              {'?', 1, 0},
            ],
            counts: [1, 1, 3, 2],
          },
          %Row{
            clusters: [
              {'?', 1, 0},
              {'?', 1, 0},
              {'??#?', 3, 1},
              {'#', 0, 1},
              {'?', 1, 0},
              {'????', 4, 0},
            ],
            counts: [1, 4, 1, 1, 2],
          },
          %Row{
            clusters: [
              {'?', 1, 0},
              {'#', 0, 1},
              {'???', 3, 0},
              {'??', 2, 0},
              {'???', 3, 0},
            ],
            counts: [1, 3, 1, 2],
          },
          %Row{
            clusters: [
              {'?', 1, 0},
              {'##?', 1, 2},
              {'???', 3, 0},
              {'??', 2, 0},
              {'?', 1, 0},
            ],
            counts: [1, 3, 2, 2],
          },
        ],
      ]
    end

    test "parser gets expected rows", fixture do
      act_rows = fixture.input
                 |> parse_input_string()
                 |> Enum.to_list()
      assert act_rows == fixture.exp_rows
    end
  end
end
