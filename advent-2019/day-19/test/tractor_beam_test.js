'use strict';
const expect = require('chai').expect;
const TractorBeam = require('../src/tractor_beam');

// #.........
// .#........
// ..##......
// ...###....
// ....###...
// .....####.
// ......####
// ......####
// .......###
// ........##
const puzzleExample1 = '3,20,3,21,2,21,22,24,1,24,20,24,9,24,204,25,99,0,0,0,0,0,10,10,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1';

// #.......................................
// .#......................................
// ..##....................................
// ...###..................................
// ....###.................................
// .....####...............................
// ......#####.............................
// ......######............................
// .......#######..........................
// ........########........................
// .........#########......................
// ..........#########.....................
// ...........##########...................
// ...........############.................
// ............############................
// .............#############..............
// ..............##############............
// ...............###############..........
// ................###############.........
// ................#################.......
// .................########OOOOOOOOOO.....
// ..................#######OOOOOOOOOO#....
// ...................######OOOOOOOOOO###..
// ....................#####OOOOOOOOOO#####
// .....................####OOOOOOOOOO#####
// .....................####OOOOOOOOOO#####
// ......................###OOOOOOOOOO#####
// .......................##OOOOOOOOOO#####
// ........................#OOOOOOOOOO#####
// .........................OOOOOOOOOO#####
// ..........................##############
// ..........................##############
// ...........................#############
// ............................############
// .............................###########
const puzzleExample2 = '3,20,3,21,2,21,22,24,1,24,20,24,9,24,204,25,99,0,0,0,0,0,40,35,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1';

describe('tractor beam affected-points tests [puzzle example #1]', () => {
  let example1;
  before(() => {
    example1 = new TractorBeam(puzzleExample1);
    example1.mapGrid(10, 10);
  });
  it('should compute affected points correctly', () => {
    expect(example1.pointsAffected).to.eql(27);
  });
  it('should throw an exception for invalid height');
  it('should throw an exception for invalid width');
});
describe('tractor beam point-check tests [puzzle example #1]', () => {
  let example1;
  before(() => {
    example1 = new TractorBeam(puzzleExample1);
  });
  it('should identify [0, 0] as pulled', () => {
    // first time runs the program (slower)
    expect(example1.checkPoint([0, 0])).to.eql(1);
    // subsequent times grabs from grid (faster)
    expect(example1.checkPoint([0, 0])).to.eql(1);
  });
  it('should identify [0, 1] as stationary', () => {
    // first time runs the program (slower)
    expect(example1.checkPoint([0, 1])).to.eql(0);
    // subsequent times grabs from grid (faster)
    expect(example1.checkPoint([0, 1])).to.eql(0);
  });
  it('should identify [9, 7] as stationary', () => {
    expect(example1.checkPoint([9, 7])).to.eql(0);
  });
  it('should identify [9, 8] as pulled', () => {
    expect(example1.checkPoint([9, 8])).to.eql(1);
  });
  it('should identify [9, 9] as pulled', () => {
    expect(example1.checkPoint([9, 9])).to.eql(1);
  });
  it('should identify [5, 9] as stationary', () => {
    expect(example1.checkPoint([5, 9])).to.eql(0);
  });
  it('should identify [6, 9] as pulled', () => {
    expect(example1.checkPoint([9, 9])).to.eql(1);
  });
  it('should throw an exception for invalid position');
});
describe('tractor beam fits-within tests [puzzle example #1]', () => {
  let example1;
  before(() => {
    example1 = new TractorBeam(puzzleExample1);
  });
  it('should compute a 2x2 box location correctly', () => {
    expect(example1.closestBoxPosition(2)).to.eql([3, 4]);
  });
  it('should compute a 3x3 box location correctly', () => {
    expect(example1.closestBoxPosition(3)).to.eql([5, 6]);
  });
});
describe('tractor beam fits-within tests [puzzle example #2]', () => {
  let example2;
  before(() => {
    example2 = new TractorBeam(puzzleExample2);
  });
  it('should compute a 5x5 box location correctly', () => {
    expect(example2.closestBoxPosition(5)).to.eql([9, 11]);
  });
  it('should compute a 10x10 box location correctly', () => {
    expect(example2.closestBoxPosition(10)).to.eql([20, 25]);
  });
  it('should compute the puzzle answer correctly', () => {
    const closestPos = example2.closestBoxPosition(10);
    // TODO move this to Tractor.checksum() static method
    const checksum = closestPos[1] * 10000 + closestPos[0];
    expect(checksum).to.eql(250020);
  });
  it('should throw an exception for invalid size');
});
