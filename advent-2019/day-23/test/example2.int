// PROGRAM (0-89)

// get my network address
0       IN M90
2       JTRU M90,18        // if I am NIC 1, jump around NIC 0 init

// initialize NIC 0
5       ADD 0,1,M91        // my peer is NIC 1

// NIC 0 "primes the pump" by sending initial packet
9       OUT M91            // A
11      OUT 1011           // X=1011
13      OUT 1              // Y=1
15      JTRU 1,22          // I am NIC 0, jump around NIC 1 init

// initialize NIC 1
18      ADD 0,0,M91        // my peer is NIC 0

// main loop (any NIC)
22      IN M92             // attempt to receive packet: X part
24      LT M92,0,M94       // -1 means no packet available
28      JTRU M94,22        //   ...so try again
31      IN M93             // receive Y part of packet

// either NIC will double the Y
33      MUL M93,2,M93      // double the Y
37      JTRU M90,54        // if I am NIC 1, jump around NIC 0 resetter

// NIC 0 will reset to Y=1 when Y>=65536
40      LT M93,65536,M95
44      JTRU M95,51        // should not reset, jump around it
47      ADD 0,1,M93        // reset Y=1
51      JTRU 1,72          // I am NIC 0, jump around NIC 1 staller

// NIC 1 will send to NAT (idles the network) when Y>=256
54      LT M93,256,M96
58      JTRU M96,68        // should not send to NAT, jump around it
61      ADD 0,255,M91      // send packet to NAT (A=255)
65      JTRU 1,72          // else
68      ADD 0,0,M91        // send packet to peer NIC (A=0)

// send packet
72      OUT M91            // send packet: A part
74      OUT M92            //   X part
76      OUT M93            //   Y part

// return to main loop
78      JTRU 1,22

// done (not reached)
81      HALT

// PROGRAM DATA (90-)

90      0   // my network address
91      0   // packet A value (peer/NAT network address)
92      0   // packet X value
93      0   // packet Y value
94      0   // packet available? 1=no 0=yes
95      0   // should NIC 0 reset to Y=1? 1=no 0=yes
96      0   // should NIC 1 stall out? 1=no 0=yes
